

事件 按钮1.被单击()
	如果 编辑框2.取内容() == "" 则
		返回
	结束 如果
	编辑框2.清除焦点()
	客户端1.打开连接("ws://" + 编辑框2.取内容() +":5355")
结束 事件

事件 按钮2.被单击()
	客户端1.发送数据("取进程列表")
结束 事件

事件 按钮3.被单击()
	时钟1.停止执行()
	客户端1.关闭连接()
	编辑框2.清除焦点()
结束 事件

事件 客户端1.连接成功()
	对话框1.信息框("信息","连接成功")
	时钟1.开始执行(2000,真)
结束 事件

事件 客户端1.出现错误(错误信息 为 文本型)
	对话框1.信息框("信息","连接失败：" + 错误信息)
	时钟1.停止执行()
结束 事件

事件 客户端1.收到数据(数据 为 文本型)
	如果 文本操作.寻找文本(数据,"OK停止",0) != -1 则
		对话框1.信息框("信息","OK")
		返回
	否则
	    如果 文本操作.寻找文本(数据,"进程列表",0) != -1 则
		    变量 初始列表 为 文本型
			初始列表=文本操作.子文本替换(数据,"进程列表","")
			变量 处理后列表 为 文本型[]
			处理后列表=文本操作.分割文本(初始列表,"|")
			变量 已处理数 为 数值型 = 0
			列表框1.置可视(真)
			列表框1.清空项目()
			判断循环首 已处理数 < 数组操作.取成员数(处理后列表)
				列表框1.添加项目(处理后列表[已处理数],"","mui-btn","结束进程")
				已处理数=已处理数+1
			判断循环尾
		结束 如果
	结束 如果
结束 事件

事件 客户端1.连接断开()
	对话框1.信息框("信息","连接断开")
结束 事件

事件 按钮组1.被单击(按钮索引 为 数值型)
	如果 按钮索引 == 0 则
	    客户端1.发送数据("开启线控")
	否则
	    客户端1.发送数据("关闭线控")
	结束 如果
结束 事件

事件 主窗口.创建完毕()
	列表框1.置可视(假)
	按钮组1.置标题(0,"开启线控")
	按钮组1.置标题(1,"关闭线控")
	按钮组2.置标题(0,"显示")
	按钮组2.置标题(1,"关闭")
	如果 读写设置.读取设置("ip") != "" 则
		编辑框2.置内容(读写设置.读取设置("ip"))
	结束 如果
	滑块条1.置最大位置(255)
	滑块条2.置最大位置(255)
	滑块条3.置最大位置(255)
	滑块条1.置位置(0)
	滑块条2.置位置(0)
	滑块条3.置位置(0)
结束 事件

事件 时钟1.周期事件()
	客户端1.发送数据("HeartBeat")
结束 事件

事件 列表框1.按钮被单击(项目索引 为 数值型)
	客户端1.发送数据("结束进程" + 列表框1.取项目标题(项目索引))
结束 事件

事件 按钮4.被单击()
	客户端1.发送数据("隐性指令" + 编辑框1.取内容())
	编辑框1.清除焦点()
结束 事件

事件 按钮5.被单击()
	客户端1.发送数据("显性指令" + 编辑框1.取内容())
	编辑框1.清除焦点()
结束 事件

事件 编辑框2.内容被改变(内容 为 文本型)
    读写设置.保存设置("ip",编辑框2.取内容())
结束 事件

事件 编辑框2.失去焦点()
	读写设置.保存设置("ip",编辑框2.取内容())
结束 事件

事件 按钮组2.被单击(按钮索引 为 数值型)
	如果 按钮索引 == 0 则
	    客户端1.发送数据("#print" + 编辑框3.取内容())
		网络操作1.发送网络请求("https://od.lk/s/","get","txt","",200)
		编辑框5.清除焦点()
		编辑框4.清除焦点()
		编辑框3.清除焦点()
	否则
	    客户端1.发送数据("关闭显示")
		编辑框5.清除焦点()
		编辑框4.清除焦点()
		编辑框3.清除焦点()
	结束 如果
结束 事件

事件 网络操作1.发送完毕(发送结果 为 逻辑型,返回信息 为 文本型)
	客户端1.发送数据("#color" + 编辑框5.取内容())
	网络操作2.发送网络请求("https://od.lk/s/","get","txt","",200)
结束 事件

事件 网络操作2.发送完毕(发送结果 为 逻辑型,返回信息 为 文本型)
	客户端1.发送数据("#size" + 编辑框4.取内容())
结束 事件

事件 按钮6.被单击()
	网络操作3.发送网络请求("https://od.lk/s/NDZfODU0NzQzNF8/abc.txt","get","txt","",11000)
结束 事件

事件 网络操作3.发送完毕(发送结果 为 逻辑型,返回信息 为 文本型)
	如果 文本操作.寻找文本(返回信息,"进程列表",0) != -1 则
		变量 初始列表 为 文本型
		初始列表=文本操作.子文本替换(返回信息,"进程列表","")
		变量 处理后列表 为 文本型[]
		处理后列表=文本操作.分割文本(初始列表,"|")
		变量 已处理数 为 数值型 = 0
		列表框1.置可视(真)
		列表框1.清空项目()
		判断循环首 已处理数 < 数组操作.取成员数(处理后列表)
			列表框1.添加项目(处理后列表[已处理数],"","mui-btn","结束进程")
			已处理数=已处理数+1
		判断循环尾
	结束 如果
结束 事件

事件 滑块条1.滑块被移动(位置 为 数值型)
	编辑框5.置内容(转换操作.到文本(滑块条1.取位置()+ 滑块条2.取位置() * 256 + 滑块条3.取位置()*256*256))
	变量 红色代码 为 文本型
	变量 绿色代码 为 文本型
	变量 蓝色代码 为 文本型
	如果 滑块条1.取位置() < 16 则
		红色代码="0"+ 转换操作.到十六进制(滑块条1.取位置())
	否则
	    红色代码=转换操作.到十六进制(滑块条1.取位置())
	结束 如果
	如果 滑块条2.取位置() < 16 则
		绿色代码="0"+ 转换操作.到十六进制(滑块条2.取位置())
	否则
	    绿色代码=转换操作.到十六进制(滑块条2.取位置())
	结束 如果
	如果 滑块条3.取位置() < 16 则
		蓝色代码="0"+ 转换操作.到十六进制(滑块条3.取位置())
	否则
	    蓝色代码=转换操作.到十六进制(滑块条3.取位置())
	结束 如果
	标签1.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签2.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签3.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
结束 事件

事件 滑块条2.滑块被移动(位置 为 数值型)
	编辑框5.置内容(转换操作.到文本(滑块条1.取位置()+ 滑块条2.取位置() * 256 + 滑块条3.取位置()*256*256))
	变量 红色代码 为 文本型
	变量 绿色代码 为 文本型
	变量 蓝色代码 为 文本型
	如果 滑块条1.取位置() < 16 则
		红色代码="0"+ 转换操作.到十六进制(滑块条1.取位置())
	否则
	    红色代码=转换操作.到十六进制(滑块条1.取位置())
	结束 如果
	如果 滑块条2.取位置() < 16 则
		绿色代码="0"+ 转换操作.到十六进制(滑块条2.取位置())
	否则
	    绿色代码=转换操作.到十六进制(滑块条2.取位置())
	结束 如果
	如果 滑块条3.取位置() < 16 则
		蓝色代码="0"+ 转换操作.到十六进制(滑块条3.取位置())
	否则
	    蓝色代码=转换操作.到十六进制(滑块条3.取位置())
	结束 如果
	标签1.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签2.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签3.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
结束 事件

事件 滑块条3.滑块被移动(位置 为 数值型)
		编辑框5.置内容(转换操作.到文本(滑块条1.取位置()+ 滑块条2.取位置() * 256 + 滑块条3.取位置()*256*256))
	变量 红色代码 为 文本型
	变量 绿色代码 为 文本型
	变量 蓝色代码 为 文本型
	如果 滑块条1.取位置() < 16 则
		红色代码="0"+ 转换操作.到十六进制(滑块条1.取位置())
	否则
	    红色代码=转换操作.到十六进制(滑块条1.取位置())
	结束 如果
	如果 滑块条2.取位置() < 16 则
		绿色代码="0"+ 转换操作.到十六进制(滑块条2.取位置())
	否则
	    绿色代码=转换操作.到十六进制(滑块条2.取位置())
	结束 如果
	如果 滑块条3.取位置() < 16 则
		蓝色代码="0"+ 转换操作.到十六进制(滑块条3.取位置())
	否则
	    蓝色代码=转换操作.到十六进制(滑块条3.取位置())
	结束 如果
	标签1.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签2.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
	标签3.置字体颜色("#" + 红色代码 + 绿色代码 + 蓝色代码)
结束 事件

事件 编辑框5.内容被改变(内容 为 文本型)
	如果 文本操作.寻找文本(编辑框5.取内容(),"#",0) != -1 且 文本操作.取文本长度(编辑框5.取内容()) == 7 则
		变量 操作文本 为 文本型
	    变量 红 为 文本型
	    变量 绿 为 文本型
	    变量 蓝 为 文本型
		操作文本=文本操作.子文本替换(编辑框5.取内容(),"#","")
		红=转换操作.到文本(转换操作.到十进制(文本操作.取文本中间(操作文本,0,2)))
		绿=转换操作.到文本(转换操作.到十进制(文本操作.取文本中间(操作文本,2,2)))
		蓝=转换操作.到文本(转换操作.到十进制(文本操作.取文本中间(操作文本,4,2)))
		滑块条1.置位置(转换操作.到数值(红))
		滑块条2.置位置(转换操作.到数值(绿))
		滑块条3.置位置(转换操作.到数值(蓝))
		编辑框5.置内容(转换操作.到文本(滑块条1.取位置()+ 滑块条2.取位置() * 256 + 滑块条3.取位置()*256*256))
	    标签1.置字体颜色("#" + 转换操作.到十六进制(转换操作.到数值(红)) + 转换操作.到十六进制(转换操作.到数值(绿)) + 转换操作.到十六进制(转换操作.到数值(蓝)))
	    标签2.置字体颜色("#" + 转换操作.到十六进制(转换操作.到数值(红)) + 转换操作.到十六进制(转换操作.到数值(绿)) + 转换操作.到十六进制(转换操作.到数值(蓝)))
	    标签3.置字体颜色("#" + 转换操作.到十六进制(转换操作.到数值(红)) + 转换操作.到十六进制(转换操作.到数值(绿)) + 转换操作.到十六进制(转换操作.到数值(蓝)))
		编辑框5.清除焦点()
	结束 如果
结束 事件